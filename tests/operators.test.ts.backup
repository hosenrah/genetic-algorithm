import { generateRandomDNA, validateDNA, decode, createNucleotideDictionary, deoxyribonucleotides, operandsAndOperators } from "../src/operators";
import { from, range, Observable, concat, of } from "rxjs";
import { count, filter, map } from 'rxjs/operators';

const exampleDictionary = createNucleotideDictionary(deoxyribonucleotides, operandsAndOperators);
const validNucleotide = '1100';
const validNucleotideDecoded = '*';
const invalidNucleotide = '1111';
const invalidDNA = ['1110', '0100', '0000'];
const validDecodedDNA = [1, '+', 3, '*', 5];
const invalidDecodedDNA = [1, '+', '*', 2];

describe('Test random DNA generator', () => {
  it('should return a random DNA observable with 7 nucleotides and complete', () => {
    const nucleotides = 7;
    const dna = generateRandomDNA(nucleotides);
    dna.pipe(count()).subscribe({
      next(value) { console.log(value); },
      error(err) { console.log(err); },
      complete() { console.log('complete'); }
    });
  });

  it('should return an error on nucleotide amounts = 0', () => {
    const nucleotides = 0;
    function generate() {
      generateRandomDNA(nucleotides);
    };
    expect(generate).toThrowError('generateRandomDNA::generateRandomDNA only accepts numbers > 0');
  });

  it('should return an error on nucleotide amounts < 0', () => {
    const nucleotides = -3;
    function generate() {
      generateRandomDNA(nucleotides);
    };
    expect(generate).toThrowError('generateRandomDNA::generateRandomDNA only accepts numbers > 0');
  });
});

describe('Test decode operator', () => {
  // it('should be able to decode a nucleotide which is part of the dictionary', () => {
  //   of(invalidDNA).pipe(
  //     decode(validNucleotide)
  //   ).subscribe({
  //     next(x) { expect(x).toBe(validNucleotideDecoded); }
  //   });
  // });

  // it('should throw an error if it can\'t find the nucleotide in the dictionary', () => {
  //   exampleDictionary.pipe(
  //     decode(invalidNucleotide)
  //   ).subscribe({
  //     error(err) { expect(err).toBe('decode operator::No match found'); }
  //   });
  // });
});

describe('Test DNA validator', () => {
  it('should return true if DNA is valid', () => {
    validateDNA(validDecodedDNA).subscribe((result) => {
      expect(result).toStrictEqual(true);
    });
  });

  // it('should return an error if DNA is invalid', done => {
  //   validateDNA(invalidDecodedDNA).subscribe({
  //     error(err) { expect(err).toBe('No valid DNA'); done(); }
  //   });
  // }, 1500); 
});